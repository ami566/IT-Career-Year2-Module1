using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace GRID
{
    public class RaceTower
    {
        public int LapsNumber { get; set; } 
        public int TrackLength { get; set; }
        public int CurrentLap = 0;
        public string TotalLaps { get; set; }
        private int failureIndex = 0; 
       
        Dictionary<string, Driver> Drivers { get; set; }
        
        public void SetTrackInfo(int lapsNumber, int trackLength)
        {
            this.LapsNumber = lapsNumber;
            this.TrackLength = trackLength;
        }
        public void RegisterDriver(List<string> commandArgs)
        {
            try
            {
                string type = commandArgs[0];
                string name = commandArgs[1];
                int hp = int.Parse(commandArgs[2]);
                double fieldAmount = double.Parse(commandArgs[3]);
                string tyreType = commandArgs[4];
                double tyreHardness = double.Parse(commandArgs[5]);
                Tyre tyre = null;
                if (tyreType == "Ultrasoft")
                {
                    double grip = double.Parse(commandArgs[6]);
                    tyre = new UltrasoftTyre(tyreHardness, grip);
                }
                else
                {
                    double grip = double.Parse(commandArgs[6]);
                    tyre = new HardTyre(tyreHardness);
                }

                Driver driver = null;
                if (type == "Aggressive")
                {
                    driver = new AggressiveDriver(name);
                    Drivers.Add(name, driver);
                }
                else
                {
                    driver = new EnduranceDriver(name);
                    Drivers.Add(name, driver);
                }
            }
            catch (Exception)
            {

                throw;
            }

            private void CompleLaps()
            {
                foreach (var driver in Drivers)
                {
                    try
                    {
                        driver.Value.TotalTime += 60.0 / (this.TrackLength / driver.Value.Speed);
                        driver.Value.Car.FuelAmount -= TrackLength * driver.Value.FuelConsumptionPerKm;
                        driver.Value.Car.Tyre.Degrade();
                    }
                    catch (Exception e)
                    {
                        driver.Value.TotalTime = int.MaxValue;
                        driver.Value.FailureReason = e.Message;
                        driver.Value.FailureIndex = failureIndex;
                        failureIndex++;
                    }

                    LapsNumber--;
                    CurrentLap++;
                }
            }

            public void CompleteLaps(List<string> commandArgs)
            {
                int doLaps = int.Parse(commandArgs[0]);

                if (doLaps > LapsNumber)
                {
                    new Exception($"There is no time! On lap {this.CurrentLap}");
                }

                for (int i = 0; i < doLaps; i++)
                {
                    CompleLaps();
                }

            }

            public void DriverBoxes(List<string> commandArgs)
            {
                string reason = commandArgs[0];
                string driverName = commandArgs[1];

                Drivers[driverName].TotalTime += 20;

                if (reason == "Refuel")
                {
                    double fuelAmount = double.Parse(commandArgs[2]);
                    Drivers[driverName].Car.FuelAmount += fuelAmount;
                }
                else
                {
                    string typeTyre = commandArgs[2];
                    double tyreHardness = double.Parse(commandArgs[3]);

                    Tyre newTyre = null;

                    if (typeTyre == "Ultrasoft")
                    {
                        double grip = double.Parse(commandArgs[4]);
                        newTyre = new UltrasoftTyre(tyreHardness, grip);
                    }
                    else
                    {
                        newTyre = new HardTyre(tyreHardness);
                    }

                    Drivers[driverName].Car.Tyre = newTyre;

                }
            }

            public string GetLeaderboard()
            {
                string output = "";
                output += "Lap" + CurrentLap + "/" + TotalLaps + Environment.NewLine;
                var sortedDrivers = Drivers.OrderBy(item => item.Value.TotalTime).ToDictionary(item => item.Key, item => item.Value);
                int position = 1;
                foreach (var item in sortedDrivers)
                {
                    if (item.Value.FailureReason != null)
                    {
                       output += position + " " + item.Value.Name + " " + item.Value.FailureReason + Environment.NewLine;
                    }
                    else
                    {
                       output += position + " " + item.Value.Name + " ";
                    }
                }
            }

            public string Finish
            {
            return $"{}";

            }

        //public string GetLeaderboard()
        //{
        //    drivers = drivers.OrderBy(x => x.TotalTime).ToList();
        //    string s = "";
        //    int index = 0;
        //    s += $"Lap {currentLap}/{lapsNumber}";
        //    foreach (var driver in drivers)
        //    {
        //        if (!Fdrivers.ContainsKey(driver))
        //        {
        //            s += Environment.NewLine + $"{++index} {driver.Name} {driver.TotalTime:F3}";
        //        }
        //    }
        //    foreach (var driver in Fdrivers.Keys)
        //    {
        //        s += Environment.NewLine + $"{++index} {driver.Name} {Fdrivers[driver]}";
        //    }
        //    return s;
        //}
        //public void endRace()
        //{
        //    drivers = drivers.OrderByDescending(x => x.TotalTime).ToList();
        //    Console.WriteLine("{0} wins the race for {1:F3} seconds.", drivers.Last().Name, drivers.Last().TotalTime);
        }
    }
} 
